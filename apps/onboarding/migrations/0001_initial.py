# Generated by Django 2.2.5 on 2020-02-21 00:06

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Region",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("region_id", models.IntegerField()),
                ("region_name", models.CharField(max_length=100)),
                (
                    "region_pretty_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("fips", models.CharField(max_length=5)),
                ("active", models.IntegerField(blank=True, null=True)),
                ("is_exclusive", models.IntegerField(blank=True, null=True)),
                ("model_id", models.IntegerField(blank=True, null=True)),
            ],
            options={"db_table": "audantic_regions", "managed": False,},
        ),
        migrations.CreateModel(
            name="Settings",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField()),
                ("region_id", models.IntegerField(blank=True, null=True)),
                ("model_id", models.IntegerField(blank=True, null=True)),
                ("mail_count", models.IntegerField(blank=True, null=True)),
                ("pct_occ", models.IntegerField(blank=True, null=True)),
                ("pct_nocc", models.IntegerField(blank=True, null=True)),
                ("loo_min", models.IntegerField(blank=True, null=True)),
                ("sqft_min", models.IntegerField(blank=True, null=True)),
                ("sqft_max", models.IntegerField(blank=True, null=True)),
                ("equity_min", models.IntegerField(blank=True, null=True)),
                ("equity_max", models.IntegerField(blank=True, null=True)),
                ("tav_min", models.IntegerField(blank=True, null=True)),
                ("tav_max", models.IntegerField(blank=True, null=True)),
                ("tav_min_pctile", models.IntegerField(blank=True, null=True)),
                ("tav_max_pctile", models.IntegerField(blank=True, null=True)),
                ("est_val_min", models.IntegerField(blank=True, null=True)),
                ("est_val_max", models.IntegerField(blank=True, null=True)),
                ("est_val_min_pctile", models.IntegerField(blank=True, null=True)),
                ("est_val_max_pctile", models.IntegerField(blank=True, null=True)),
                ("mkt_val_min", models.IntegerField(blank=True, null=True)),
                ("mkt_val_max", models.IntegerField(blank=True, null=True)),
                (
                    "mosaic_filter",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("name_filter", models.IntegerField(blank=True, null=True)),
                ("append_phone", models.IntegerField(blank=True, null=True)),
                ("append_tax", models.IntegerField(blank=True, null=True)),
                ("append_parcel", models.IntegerField(blank=True, null=True)),
                ("sfr", models.IntegerField(blank=True, null=True)),
                ("mf", models.IntegerField(blank=True, null=True)),
                ("condo", models.IntegerField(blank=True, null=True)),
            ],
            options={"db_table": "audantic_region_settings", "managed": False,},
        ),
    ]
